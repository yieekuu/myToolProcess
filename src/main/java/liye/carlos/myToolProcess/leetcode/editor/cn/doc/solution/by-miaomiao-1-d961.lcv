> 前言：春赛结束近一周了，小透明出题人想来看看大家做这道题目的感受。惊悉 [@tsreaper](/u/tsreaper/) 大佬[题解](https://leetcode-cn.com/problems/NfY1m5/solution/by-tsreaper-qhvj/)中提到题目与 [AGC070C](https://atcoder.jp/contests/arc070/tasks/arc070_c) 一致，只恨自己题目刷的太少撞车了。
> 撞题这种事情自然是百口莫辩，毕竟一个在前一个在后。所以在此写下本题的解题思路，以让大家理解这题是怎么出来的。

## 朴素的动态规划

假设第 $i$ 块浮木的的初始范围为 $[l_i, r_i]$，将浮木移动到 $[L_i, R_i]$。则题设要求任意两块木板之间需要有重叠部分，即
$$
L_{i-1} \le R_{i} \ \lor \ R_{i-1} \ge L_{i},\quad \forall 1 < i \le \text{num} \tag{1}
$$

不妨设 $d_i = r_i - l_i$，有 $r_i = l_i + d_i, R_i = L_i+d_i$。

此时我们设 $dp[i][j]$ 表示当第 $i$ 块浮木的左侧移动到 $j$ 位置（$L_i = j$）时，在 $i$ 之前（包括 $i$）的浮木都相接，所需要花费的最小力量。则转移方程式有：

$$
dp[i][j] = \min \left\{dp[i-1][k]\right\} + |j - l_i|
$$

根据(1)式观察 $k$ 需要符合什么要求：

$$
k \le j + d_i\ \lor\  k+d_{i-1} \ge j \\
j-d_{i-1} \le k \le j + d_i \tag{2}
$$

将得到的范围代回转移方程式，得到：
$$
dp[i][j] = \min_{k \in \left[j-d_{i-1}, j + d_i\right]} \left\{dp[i-1][k]\right\} + |j - l_i| \tag{3}
$$

初始化 $dp[1][j] = |j - l_1|$，答案为 $\min dp[\text{num}][j]$。
这里需要注意无论在转移还是得到答案时，$j$不会超出范围 $[\min L_i, \max L_i]$。

使用朴素的动态规划实现，时间复杂度为 $O(NM^2)$，其中 $N=\text{num}, M = \max L_i - \min L_i + 1$。

## 单调队列优化的动态规划

如果熟悉单调队列优化DP的扣友，看到(3)式应该下意识地对其进行优化。
具体而言，如果观察固定 $i$， $j$ 向前时，对应范围 $\left[j-d_{i-1}, j + d_i\right]$ 是类似一个滑动窗口向前的。
可以将其概括为计算在滑动窗口内最小值的问题。这是由[单调队列](https://oi-wiki.org/ds/monotonous-queue/)能够解决的经典问题，在此不再赘述。
时间复杂度为 $O(NM)$。

> 最初设计此题时，觉得春赛难度止步于此。设计的 $\text{num}$ 为 5000， $l_i, r_i$ 的范围也为 $[1, 5000]$。
> 后面认为战队赛需要更高的难度，因此有了更大的范围和进一步的优化：

## 数形结合

> 看了所撞的题目的[题解](https://www.cnblogs.com/wyzwyz/p/14038855.html)，很多都是函数凸函数性质上得到的。在我出此题时最初是从 $dp[i][j]$ 的图像中得到的。

绘制 $dp[i][j]$ 的图像，绘制的方法是固定 $i$，将 $j$ 作为坐标轴 $x$ 轴，将 $dp[i][j]$ 作为坐标轴 $y$ 轴。首先对于 $i = 1$ 而言，能发现其为经典的绝对值图像：
![dp[1][j]图像](https://pic.leetcode-cn.com/1651252334-RSwTDM-1.png)

接着考虑转移到 $dp[2][j]$ 时，可分解为两步，分别(3)式中的取最小值部分和加上一个绝对值的部分。
- 对于取最小值部分，观察(2)中 k 的取值范围，能够清晰地描述出最小值取值规律
  - 对于 $j \in [l_1 - d_2, l_1 + d_1]$ 的部分，取到原先的最小值（对于$i=2$时$dp[2][j]=0$）
  - 对于 $j < l_1 - d_2$ 的部分取最右边的值为最小值
  - 对于 $j > l_1 + d_1$ 的部分取最左边的值为最小值
    该步结束后的图像为：![dp[2][j]-1](https://pic.leetcode-cn.com/1651253215-CbLfXb-1.png)
- 然后考虑在此图像上添加绝对值函数，我们可以认为$l_2$左侧的线段斜率$-1$，右侧的线段斜率$+1$，具体有两种情况：
  - $l_2 \in [l_1 - d_2, l_1 + d_1]$。此时函数的最小值还是 $0$，物理意义上即不用移动浮木还是相连接的。函数例如：  
    ![dp[2][j]-2-1](https://pic.leetcode-cn.com/1651253694-lCqljb-1.png)
  - 其他。此时函数的最小值不再为0，意味着必须通过移动浮木才能保持相连接。函数例如：
    ![dp[2][j]-2-2](https://pic.leetcode-cn.com/1651254748-iiAUhW-1.png)

需要注意上述为$i$从$1$到$2$时的一个特例，在后面的$i$中，最小值部分和添加绝对值的部分，围绕的不再是$l_1$，而是最小值的一段。此处略去更复杂情况的图像，请扣友自行绘图。

此处如果要严格证明图像为凸函数，要用到一个定理：两个凸函数相加，其结果还是为凸函数。此处绝对值函数不断相加的结果是为凸函数。而取最小值操作，可以看作将函数在斜率为0的位置拉伸（增加一段斜率为0的段），不破坏函数的凸性质。

## $O(N^2)$ 解法

在绘制函数图像并得到图像的凸性质后，有一个时间复杂度为 $O(N^2)$ 的解法：
维护这条折线上的折点位置。在取最小值时，将斜率为0左侧的点向左偏移 $d_i$，右侧的点向右偏移 $d_{i-1}$；当添加绝对值函数时，在$l_i$位置插入两个点，表示斜率在此位置`+1`再`+1`（从左向右看，设左侧无穷大位置折线斜率为$-i$）。另外需要记录整条折线的最小值，折线的最小值会在上述添加最小值时，落在非原先最小值位置产生，值为两者之间的距离。具体而言：
- 当落在左侧时，为原先的最小值区间**左侧**的点到 $l_i$ 的距离
- 当落在右侧时，为原先的最小值区间**右侧**的点到 $l_i$ 的距离
  上述计算是基于加上的绝对值函数斜率为-1和1，因此$x$轴上距离就是最小值变大的数量。

每轮需要对这些点进行移动操作，因此时间复杂度为 $O(N^2)$。

> 该解法的时间复杂度已经与 $\max L_i - \min L_i$ 无关了， $\text{num}$ 仍为 5000。

## 优先队列优化

殊路同归，最后来看一下怎么得到优美的 $O(N\log N)$ 解法。

在 $O(N^2)$ 解法中描述了两类折点的变化，并发现比较关键的是斜率为$0$的折线两侧的点。
因为这两个点决定了取最小值操作时哪些向左或向右偏移，也决定了加绝对值函数时，最小值的变化。

不妨将斜率为负的折线段上的点记为 $\text{left}$，将斜率为正的折线上的点记为 $\text{right}$。
则上述的关键两个点为 $\text{left}$ 中最大的点和  $\text{right}$ 中最小的点。
将此代入之前的操作：
- 取最小值操作时  $\text{left}$ 中的值减去 $d_i$，$\text{right}$ 中的值加上 $d_{i-1}$。
  由于直接操作点时间花费过高，可以记录左侧和右侧点中的整体偏移。在插入和取出$\text{left}$ 和 $\text{right}$ 中的点时考虑偏移的影响。
- 加绝对值函数时，分三类情况：
  - $l_i$ 落在两个关键点间。此时最小值不变，分别在 $\text{left}$ 和 $\text{right}$ 中插入表示 $l_i$ 的点；
  - $l_i$ 落在 $\text{left}$ 最大值左侧，此时最小值增加 $|\max{\text{left}} - l_i|$。注意到此时 $\text{left}$ 中的最大的点，由于斜率加一，会变为斜率大于$0$的点。并且$\text{left}$ 中需要插入两次表示 $l_i$ 的点。
  - $l_i$ 落在 $\text{right}$ 最小值右侧，（情况与在左侧时对称）最小值增加 $|\min{\text{right}} - l_i|$。$\text{right}$ 中的最小的点，由于斜率减一，会变为斜率小于$0$的点。$\text{right}$ 中需要插入两次表示 $l_i$ 的点。

使用优先队列（堆）能够在 $\log N$ 时间取出两个关键点，移动关键点和插入新增加的点。总体时间复杂度为 $O(N\log N)$。

> 出题人感叹非常不幸地撞上了17年的题目，在验题过程中小伙伴们也没有发现。
> 盼望在比赛中过题的小伙伴是通过自己的努力做出来的，并希望大家对力扣的春赛/秋赛充满信心。
> 毕竟是一道曾经让出题人觉得很美妙的题目 QAQ。

